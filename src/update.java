/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs.ia;

import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author zoepa
 */
public class update extends javax.swing.JFrame {
    int pot1 = 0;
    int pot = 0;
    /**
     * Creates new form update
     */
    
    public update() {
        initComponents();
    }
    public void search(int id){
        try{
            Class.forName("org.sqlite.JDBC");
            String url = "jdbc:sqlite:/Users/zoepa/NetBeansProjects/CS IA/Database/hotel.db";
            Connection conn = DriverManager.getConnection(url);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT cstID FROM customer");
            int flag = 0;
            int csID = 0;
            while(rs.next())
            {
                if (id == rs.getInt(1))
                {
                    System.out.print("Found");
                    csID= rs.getInt(1);
                    flag = 1;
                    break;
                }
                
            }
            if (flag==1)
            {   
                pot1=1;
                System.out.print("Late Again");
                PreparedStatement ps = conn.prepareStatement("SELECT * FROM customer WHERE cstID = ?");
                ps.setInt(1,csID);
                PreparedStatement df = conn.prepareStatement("SELECT * FROM Rooms WHERE customerID = ?");
                df.setInt(1, csID);
                ResultSet r = ps.executeQuery();
                ResultSet d = df.executeQuery();
                System.out.print("Late Again");
                table.setModel(DbUtils.resultSetToTableModel(r));
                roomTable.setModel(DbUtils.resultSetToTableModel(d));
                conn.close();
            }
            
            else{
                JOptionPane.showMessageDialog(null, "Customer ID does not exist");
            }
        conn.close();
        } 
        catch (Exception e){
            e.printStackTrace();
        }
        } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cstID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        search = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        noOfGuest = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        date = new com.toedter.calendar.JDateChooser();
        todate = new com.toedter.calendar.JDateChooser();
        noOfRooms = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        cstID2 = new javax.swing.JTextField();
        rmIDs = new javax.swing.JPanel();
        r1 = new javax.swing.JCheckBox();
        r2 = new javax.swing.JCheckBox();
        r3 = new javax.swing.JCheckBox();
        r4 = new javax.swing.JCheckBox();
        r5 = new javax.swing.JCheckBox();
        r6 = new javax.swing.JCheckBox();
        r7 = new javax.swing.JCheckBox();
        r8 = new javax.swing.JCheckBox();
        r9 = new javax.swing.JCheckBox();
        r10 = new javax.swing.JCheckBox();
        r11 = new javax.swing.JCheckBox();
        r12 = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        delKey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel6.setBackground(new java.awt.Color(51, 255, 255));
        jLabel6.setFont(new java.awt.Font("SignPainter", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Dekyil Guest House");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 255, 153)));

        jLabel1.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel1.setText("Enter Customer ID");

        cstID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cstIDActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Key", "cstID", "name", "noOfGuests", "noOfRooms", "CheckInDate", "CheckOutDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        previous.setText("Previous");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 153)));

        jLabel2.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel2.setText("Edit name");

        jLabel3.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel3.setText("Edit Number Of Guests");

        jLabel4.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel4.setText("Edit Number OF Rooms");

        jLabel5.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel5.setText("Edit CheckInDate");

        jLabel7.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel7.setText("Edit CheckOutDate");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        noOfGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfGuestActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel8.setText("Enter Key");

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        noOfRooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jLabel9.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel9.setText("Edit Rooms");

        cstID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cstID2ActionPerformed(evt);
            }
        });

        r1.setText("101");
        r1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r1ActionPerformed(evt);
            }
        });

        r2.setText("102");
        r2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2ActionPerformed(evt);
            }
        });

        r3.setText("103");
        r3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r3ActionPerformed(evt);
            }
        });

        r4.setText("104");
        r4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r4ActionPerformed(evt);
            }
        });

        r5.setText("105");
        r5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r5ActionPerformed(evt);
            }
        });

        r6.setText("106");
        r6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r6ActionPerformed(evt);
            }
        });

        r7.setText("201");
        r7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r7ActionPerformed(evt);
            }
        });

        r8.setText("202");
        r8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r8ActionPerformed(evt);
            }
        });

        r9.setText("203");
        r9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r9ActionPerformed(evt);
            }
        });

        r10.setText("204");
        r10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r10ActionPerformed(evt);
            }
        });

        r11.setText("205");
        r11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r11ActionPerformed(evt);
            }
        });

        r12.setText("206");
        r12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rmIDsLayout = new javax.swing.GroupLayout(rmIDs);
        rmIDs.setLayout(rmIDsLayout);
        rmIDsLayout.setHorizontalGroup(
            rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rmIDsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rmIDsLayout.createSequentialGroup()
                        .addComponent(r1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r4))
                    .addGroup(rmIDsLayout.createSequentialGroup()
                        .addComponent(r7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(r9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rmIDsLayout.createSequentialGroup()
                        .addComponent(r5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r6))
                    .addGroup(rmIDsLayout.createSequentialGroup()
                        .addComponent(r11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r12)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        rmIDsLayout.setVerticalGroup(
            rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rmIDsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r1)
                    .addComponent(r2)
                    .addComponent(r3)
                    .addComponent(r4)
                    .addComponent(r5)
                    .addComponent(r6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rmIDsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r7)
                    .addComponent(r8)
                    .addComponent(r9)
                    .addComponent(r10)
                    .addComponent(r11)
                    .addComponent(r12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel10.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel10.setText("Enter Customer ID");

        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(update))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                        .addComponent(noOfRooms, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noOfGuest, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(name, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(todate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cstID2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(key, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(rmIDs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cstID2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfGuest, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(todate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(rmIDs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(update))
        );

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "key", "CustomerID", "RoomID", "CheckInDate", "CheckOutDate"
            }
        ));
        jScrollPane2.setViewportView(roomTable);

        jLabel11.setFont(new java.awt.Font("Heiti SC", 0, 14)); // NOI18N
        jLabel11.setText("Enter Key");

        delKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delKeyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(79, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(delKey, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cstID, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(delete)
                                .addGap(18, 18, 18)
                                .addComponent(previous)
                                .addGap(18, 18, 18)
                                .addComponent(search)
                                .addGap(18, 18, 18)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cstID, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delKey, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(previous)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(exit))
                            .addComponent(delete, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        Function_Form fnc = new Function_Form();
        fnc.setVisible(true);
        this.dispose();
                // TODO add your handling code here:
    }//GEN-LAST:event_previousActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_exitActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void noOfGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfGuestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfGuestActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try{
            String url = "jdbc:sqlite:/Users/zoepa/NetBeansProjects/CS IA/Database/hotel.db";
            Connection conn = DriverManager.getConnection(url);  
            conn.setAutoCommit(false);
            int numberOfRooms = Integer.parseInt((String) noOfRooms.getSelectedItem());
            int rmIDSelected = 0; 
            Component[] cs = rmIDs.getComponents();
            int primary_key= Integer.parseInt(key.getText());
            for (Component c : cs ){
                if(c instanceof JCheckBox){
                    JCheckBox box = (JCheckBox) c;
                    if(box.isSelected()){
                        rmIDSelected++;
                    }
                }
            }
            if(pot == 0){
                if(numberOfRooms==rmIDSelected){
                    if(r1.isSelected()){
                        update(101,primary_key);
                        r1.setSelected(false);
                    }
                    if(r2.isSelected()){
                        update(102,primary_key);
                        r2.setSelected(false);
                    }
                    if(r3.isSelected()){
                        update(103,primary_key);
                        r3.setSelected(false);
                    }
                    if(r4.isSelected()){
                        update(104,primary_key);
                        r4.setSelected(false);
                    }
                    if(r5.isSelected()){
                        update(105,primary_key);
                        r5.setSelected(false);
                    }
                    if(r6.isSelected()){
                        update(106,primary_key);
                        r6.setSelected(false);
                    }
                    if(r7.isSelected()){
                        update(201,primary_key);
                        r7.setSelected(false);
                    }
                    if(r8.isSelected()){
                        update(202,primary_key);
                        r8.setSelected(false);
                    }
                    if(r9.isSelected()){
                        update(203,primary_key);
                        r9.setSelected(false);
                    }
                    if(r10.isSelected()){
                        update(204,primary_key);
                        r10.setSelected(false);
                    }
                    if(r11.isSelected()){
                        update(205,primary_key);
                        r11.setSelected(false);
                    }
                    if(r12.isSelected()){
                        update(206,primary_key);
                        r12.setSelected(false);
                    }
                    key.setText(null);
                    cstID2.setText(null);
                    name.setText(null);
                    noOfGuest.setText(null);
                    noOfRooms.setSelectedIndex(0);
                    date.setDate(null);
                    todate.setDate(null);
                    
                    JOptionPane.showMessageDialog(null, "Booking Updated");
                    
                }
                else{
                    JOptionPane.showMessageDialog(null, "RoomID's Selected and number of rooms do not match");
                }
                
                conn.close();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        delete(Integer.parseInt(cstID.getText()));
        delKey.setText(null);     
        cstID.setText(null);// TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        search(Integer.parseInt(cstID.getText()));        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void cstIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cstIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cstIDActionPerformed

    private void r1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r1ActionPerformed
        checkRooms(101);
        if (pot==1){
            r1.setSelected(false);
        }
    }//GEN-LAST:event_r1ActionPerformed

    private void r2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2ActionPerformed
        checkRooms(102);
         if (pot==1){
            r2.setSelected(false);
        }
    }//GEN-LAST:event_r2ActionPerformed

    private void r3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r3ActionPerformed
        checkRooms(103);
         if (pot==1){
            r3.setSelected(false);
        }
    }//GEN-LAST:event_r3ActionPerformed

    private void r4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r4ActionPerformed
        checkRooms(104);
         if (pot==1){
            r4.setSelected(false);
        }
    }//GEN-LAST:event_r4ActionPerformed

    private void r5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r5ActionPerformed
        checkRooms(105);
         if (pot==1){
            r5.setSelected(false);
        }
    }//GEN-LAST:event_r5ActionPerformed

    private void r6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r6ActionPerformed
        checkRooms(106);
         if (pot==1){
            r6.setSelected(false);
        }
    }//GEN-LAST:event_r6ActionPerformed

    private void r7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r7ActionPerformed
        checkRooms(201);
         if (pot==1){
            r7.setSelected(false);
        }
    }//GEN-LAST:event_r7ActionPerformed

    private void r8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r8ActionPerformed
        checkRooms(202);
         if (pot==1){
            r8.setSelected(false);
        }
    }//GEN-LAST:event_r8ActionPerformed

    private void r9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r9ActionPerformed
        checkRooms(203);
         if (pot==1){
            r9.setSelected(false);
        }
    }//GEN-LAST:event_r9ActionPerformed

    private void r10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r10ActionPerformed
        checkRooms(204);
         if (pot==1){
            r10.setSelected(false);
        }
    }//GEN-LAST:event_r10ActionPerformed

    private void r11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r11ActionPerformed
        checkRooms(205);
         if (pot==1){
            r11.setSelected(false);
        }
    }//GEN-LAST:event_r11ActionPerformed

    private void r12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r12ActionPerformed
        checkRooms(206);
         if (pot==1){
            r12.setSelected(false);
        }
    }//GEN-LAST:event_r12ActionPerformed

    private void cstID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cstID2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cstID2ActionPerformed

    private void delKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delKeyActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed
   
       
    public void delete(int id){
        try{
            System.out.print(id);
            if(pot1 == 1){
                String j = delKey.getText();
                if (j.equals("")){
                    JOptionPane.showMessageDialog(null, "Enter Key to delete");
                }
                else{
                    int yn = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?","delete?",JOptionPane.YES_NO_OPTION);
                        if (yn == JOptionPane.YES_OPTION){
                            Class.forName("org.sqlite.JDBC");
                            String url = "jdbc:sqlite:/Users/zoepa/NetBeansProjects/CS IA/Database/hotel.db";
                            Connection conn = DriverManager.getConnection(url);
                            conn.setAutoCommit(false);
                            Statement stmt = conn.createStatement();
                            stmt.executeUpdate("DELETE FROM Rooms WHERE Primary_key ="+Integer.parseInt(delKey.getText())+";");
                            stmt.executeUpdate("DELETE FROM customer WHERE Primary_key ="+Integer.parseInt(delKey.getText())+";");   
                            conn.commit();
                            JOptionPane.showMessageDialog(null, "Deleted!");
                            DefaultTableModel mdl = (DefaultTableModel) table.getModel();
                            mdl.setRowCount(0);
                            DefaultTableModel mdl1 = (DefaultTableModel) roomTable.getModel();
                            mdl1.setRowCount(0);
                            conn.close();
                        }
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Something went wrong!");
        }
    }
    public void conn(){
        try{
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    public void checkRooms(int rmID){
         try{
            String url = "jdbc:sqlite:/Users/zoepa/NetBeansProjects/CS IA/Database/hotel.db";
            Connection conn = DriverManager.getConnection(url);  
            Statement stmt = conn.createStatement();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String dateString = df.format(date.getDate());
            String dateString1 = df.format(todate.getDate());
            Date datestring = df.parse(dateString);
            Date datestring2 = df.parse(dateString1);
                    try{
                        ResultSet asds = stmt.executeQuery("SELECT RoomID FROM Rooms");
                        while (asds.next()){
                            if (rmID == asds.getInt(1)){
                                ResultSet keys = stmt.executeQuery ("SELECT Primary_key FROM ROOMS WHERE RoomID = "+rmID+"");
                                ResultSet bs = stmt.executeQuery("SELECT customerID, CheckInDate, CheckOutDate FROM Rooms WHERE RoomID = "+rmID+"");
                                String grg =  (bs.getString(2));
                                Date dd = df.parse(grg);
                                int iys = (keys.getInt(1));
                                String frg =  (bs.getString(3));
                                Date gg = df.parse(frg);
                                if(iys == (Integer.parseInt(key.getText()))){
                                    pot = 0;
                                }
                                else{
                                    if((datestring.equals(dd))){
                                        JOptionPane.showMessageDialog(null, "Booking Already exist!");
                                        pot = 1;
                                    }
                                    else if((datestring.before(dd))&&(((datestring2.after(dd))&&(datestring2.before(gg)))||(datestring2.equals(dd)))){
                                        JOptionPane.showMessageDialog(null, "Booking Already exist!");
                                        pot = 1;
                                    }
                                    else if((datestring2.equals(gg))){
                                        JOptionPane.showMessageDialog(null, "Booking Already exist!");
                                        pot = 1;
                                    }
                                    else if((datestring.before(dd))&&(datestring2.after(gg))){
                                        JOptionPane.showMessageDialog(null, "Booking Already exist!");
                                        pot = 1;
                                    }
                                    else if((datestring.after(dd))&&(datestring2.before(gg))){
                                        JOptionPane.showMessageDialog(null, "Booking Already exist!");
                                        pot = 1;
                                    }
                                }
                            }
                        }
                            
                    }
                    catch (Exception e){
                        e.printStackTrace();
                }
            conn.close();        
         }
        catch(Exception e){

                }
    }
    public void update(int rmID, int key){
        try{
            String url = "jdbc:sqlite:/Users/zoepa/NetBeansProjects/CS IA/Database/hotel.db";
            Connection conn = DriverManager.getConnection(url);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String dateString = df.format(date.getDate());
            String dateString1 = df.format(todate.getDate());
            if(pot == 0){
                System.out.println("fads");
                String query = "UPDATE customer SET name= ?, NumberOfGuest="+Integer.parseInt(noOfGuest.getText())+", NumberOfRooms = "+Integer.parseInt((String) noOfRooms.getSelectedItem())+", CheckInDate = '"+dateString+"', CheckOutDate = '"+dateString1+"' WHERE Primary_key=="+key+" ";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, name.getText());
                pstmt.executeUpdate();
                String query1 = ("UPDATE Rooms SET CheckInDate = '"+dateString+"', CheckOutDate = '"+dateString1+"', RoomID = "+rmID+" WHERE Primary_key=="+key+"");
                PreparedStatement sd = conn.prepareStatement(query1);
                sd.executeUpdate();
                conn.commit();
            }
            else{
                JOptionPane.showMessageDialog(null, "Not updated");
            }
            conn.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new update().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cstID;
    private javax.swing.JTextField cstID2;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JTextField delKey;
    private javax.swing.JButton delete;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField key;
    private javax.swing.JTextField name;
    private javax.swing.JTextField noOfGuest;
    private javax.swing.JComboBox<String> noOfRooms;
    private javax.swing.JButton previous;
    private javax.swing.JCheckBox r1;
    private javax.swing.JCheckBox r10;
    private javax.swing.JCheckBox r11;
    private javax.swing.JCheckBox r12;
    private javax.swing.JCheckBox r2;
    private javax.swing.JCheckBox r3;
    private javax.swing.JCheckBox r4;
    private javax.swing.JCheckBox r5;
    private javax.swing.JCheckBox r6;
    private javax.swing.JCheckBox r7;
    private javax.swing.JCheckBox r8;
    private javax.swing.JCheckBox r9;
    private javax.swing.JPanel rmIDs;
    private javax.swing.JTable roomTable;
    private javax.swing.JButton search;
    private javax.swing.JTable table;
    private com.toedter.calendar.JDateChooser todate;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
